CREATE TABLESPACE "PROYECTO"
DATAFILE 'C:\app\StuarD\product\21c\oradata\XE\PROYECTO.DBF' SIZE 200M;

CREATE TEMPORARY TABLESPACE "PROYECTO_TEMP" TEMPFILE 'C:\app\StuarD\product\21c\oradata\XE\PROYECTO_TEM.DBF'  SIZE 200M;
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

CREATE ROLE ADMINISTRADOR_BD;

GRANT CREATE SESSION TO ADMINISTRADOR_BD;
GRANT CREATE ANY TABLE TO ADMINISTRADOR_BD;
GRANT CREATE ROLE TO ADMINISTRADOR_BD;
GRANT CREATE USER TO ADMINISTRADOR_BD;
GRANT CREATE VIEW TO ADMINISTRADOR_BD;
GRANT CREATE ANY INDEX TO ADMINISTRADOR_BD;
GRANT CREATE TRIGGER TO ADMINISTRADOR_BD;
GRANT CREATE PROCEDURE TO ADMINISTRADOR_BD;
GRANT CREATE SEQUENCE TO ADMINISTRADOR_BD;

CREATE USER PROYECTO IDENTIFIED BY UMG123 DEFAULT TABLESPACE PROYECTO TEMPORARY TABLESPACE PROYECTO_TEMP;

GRANT UNLIMITED TABLESPACE TO PROYECTO;

GRANT ADMINISTRADOR_BD TO PROYECTO;
--=============================================================================================================================================================
CREATE TABLE rol (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre_rol VARCHAR(25) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY (id)
);

INSERT INTO rol (nombre_rol) VALUES('oficiales de secretaria');
INSERT INTO rol (nombre_rol) VALUES('catedratico');
INSERT INTO rol (nombre_rol) VALUES('tesoreria');
INSERT INTO rol (nombre_rol) VALUES('estudiante');

CREATE TABLE users (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(25) NOT NULL,
    email VARCHAR(30) NOT NULL,
    password VARCHAR(100) NOT NULL,
    id_rol NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY (id),
    CONSTRAINT fk_rol_users FOREIGN KEY (id_rol) REFERENCES rol(id)
);

INSERT INTO users (username, email, password, id_rol) VALUES ('Admin', 'admin@gmail.com', '1234578', 1);
INSERT INTO users (username, email, password, id_rol) VALUES ('User', 'user@gmail.com', '1234578', 2);
INSERT INTO users (username, email, password, id_rol) VALUES ('Estudiante', 'estudiante@gmail.com', '1234578', 3);

COMMIT; -- CONFIRMAR TRANSACCION
ROLLBACK; -- DESCARTAR LOS CAMBIOS

-- CONSULTA
SELECT u.username, u.email, r.nombre_rol FROM users u INNER JOIN rol r ON u.id_rol = r.id;

CREATE TABLE sede(
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    direccion VARCHAR2(50) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY (id)
);

INSERT INTO sede (nombre, direccion) VALUES ('UMG', 'SANARATE');
COMMIT;

CREATE TABLE carrera (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    id_sede NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_sede_carrera FOREIGN KEY(id_sede) REFERENCES sede(id)
);

-- ALTER TABLE carrera RENAME COLUMN nomber TO nombre;

INSERT INTO carrera (nombre, id_sede) VALUES ('Ingenieria',1);
INSERT INTO carrera (nombre, id_sede) VALUES ('Derecho',1);
INSERT INTO carrera (nombre, id_sede) VALUES ('Psicologia',1);
INSERT INTO carrera (nombre, id_sede) VALUES ('Criminologia',1);
INSERT INTO carrera (nombre, id_sede) VALUES ('Administracion',1);
COMMIT;

CREATE TABLE semestre (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(30) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id)
);

-- INSERT PARA LA TABLA SEMESTRE
INSERT INTO semestre (nombre) VALUES('Primero');
INSERT INTO semestre (nombre) VALUES('Segundo');
INSERT INTO semestre (nombre) VALUES('Tercero');
INSERT INTO semestre (nombre) VALUES('Cuarto');
INSERT INTO semestre (nombre) VALUES('Quinto');
INSERT INTO semestre (nombre) VALUES('Sexto');
INSERT INTO semestre (nombre) VALUES('S�ptimo');
INSERT INTO semestre (nombre) VALUES('Octavo');
COMMIT;

-- CREAR TABBLA CURSO
CREATE TABLE curso (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    id_carrera NUMBER(12,0) NOT NULL,
    id_semestre NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_carrera_curso FOREIGN KEY(id_carrera) REFERENCES carrera(id),
    CONSTRAINT fk_semestre_curso FOREIGN KEY(id_semestre) REFERENCES semestre(id)
);

-- INSERT PARA LA TABLA CURSO
-- Primer ciclo
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Desarrollo Humano y Profesional',1,1);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Metodolog�a de la Investigaci�n',1,1);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Contabilidad I',1,1);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Indtroducci�n a los Sistemas de C�mputo',1,1);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('L�gica de Sistemas',1,1);
-- Segundo ciclo
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Prec�lculo',1,2);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('�lgebra Lineal',1,2);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Algoritmos',1,2);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Contabilidad II',1,2);
INSERT INTO curso(nombre, id_carrera, id_semestre) VALUES('Matem�tica Discreta',1,2);
COMMIT;

-- CREAR TABLA PRE REQUISITO DEL CURSO
CREATE TABLE pre_req_curso (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    pre_requisito VARCHAR2(25) NOT NULL,
    crs VARCHAR2(15) NOT NULL,
    id_curso NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_curso_req_curso FOREIGN KEY(id_curso) REFERENCES curso(id)
);

-- INSERT PARA LA TABLA PRE REQUISITO DEL CURSO
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','4',1);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',2);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',3);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',4);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',5);

INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',6);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',7);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',8);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',9);
INSERT INTO pre_req_curso(pre_requisito,crs,id_curso) VALUES('0','5',10);
COMMIT;

-- CREAR TABLA CATEDRATICO
CREATE TABLE catedratico (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    direccion VARCHAR2(50) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id)
);

-- INSERT PARA LA TABLA CAATEDRATICO
INSERT INTO catedratico(nombre, direccion) VALUES ('Dany Otoniel Oliva Beltet�n', 'Guastatoya');
INSERT INTO catedratico(nombre, direccion) VALUES ('Oscar El�as Castellanos Cordero', 'Sanarate');
COMMIT;

-- CREAR TABLA ASIGNACION DE CURSO A CATEDRATICO
CREATE TABLE asig_cat_curso (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    id_catedratico NUMBER(12,0) NOT NULL,
    id_curso NUMBER(12,0) NOT NULL,
    id_user NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_cat_asig_cat_curso FOREIGN KEY(id_catedratico) REFERENCES catedratico(id),
    CONSTRAINT fk_curso_asig_cat_curso FOREIGN KEY(id_curso) REFERENCES curso(id),
    CONSTRAINT fk_users_asig_cat_curso FOREIGN KEY(id_user) REFERENCES users(id)
);

-- INSERT PARA LA TABLA ASIGNACION DE CURSO A CATEDRATICO
INSERT INTO asig_cat_curso(id_catedratico, id_curso, id_user) VALUES(1,5,1);
INSERT INTO asig_cat_curso(id_catedratico, id_curso, id_user) VALUES(2,6,1);
COMMIT;

-- CREAR TABLA ESTUDIANTE
CREATE TABLE estudiante (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nomber VARCHAR2(50) NOT NULL,
    direccion VARCHAR2(50) NOT NULL,
    anio NUMBER(4,0) NOT NULL,
    id_carrera NUMBER(12,0) NOT NULL,
    id_user NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_carrera_estudiante FOREIGN KEY(id_carrera) REFERENCES carrera(id),
    CONSTRAINT fk_users_estudiante FOREIGN KEY(id_user) REFERENCES users(id)
);

-- INSERT PARA LA TABLA ESTUDIANTE
INSERT INTO estudiante(nomber,direccion,anio,id_carrera,id_user) VALUES('David Alejandro De Jesus Berduo Hernandez','Sanarate',2023,1,10);
INSERT INTO estudiante(nomber,direccion,anio,id_carrera,id_user) VALUES('Humberto Herminio Duarte Aguilar','Guastatoya',2023,1,11);
COMMIT;

-- CREAR TABLA METODO DE PAGO
CREATE TABLE metodo_pago (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id)
);

-- INSERT PARA LA TABLA METODO DE PAGO
INSERT INTO metodo_pago (nombre) VALUES('Transferencia');
INSERT INTO metodo_pago (nombre) VALUES('Deposito');
COMMIT;

-- CREAR TABLA TIPO DE PAGO
CREATE TABLE tipo_pago (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id)
);

--INSERT PARA LA TABLA TIPO DE PAGO
INSERT INTO tipo_pago(nombre) VALUES('Inscripci�n ordinaria');
INSERT INTO tipo_pago(nombre) VALUES('Inscripci�n extraordinaria');
COMMIT;

-- CREAR TABLA PAGO
CREATE TABLE pago (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    id_estudiante NUMBER(12,0) NOT NULL,
    id_semestre NUMBER(12,0) NOT NULL,
    id_tipo_pago NUMBER(12,0) NOT NULL,
    id_metodo_pago NUMBER(12,0) NOT NULL,
    mes NUMBER(3,0) NOT NULL,
    anio NUMBER(4,0) NOT NULL,
    monto NUMBER(16,2) NOT NULL,
    id_user NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_estudiante_pago FOREIGN KEY(id_estudiante) REFERENCES estudiante(id),
    CONSTRAINT fk_semestre_pago FOREIGN KEY(id_semestre) REFERENCES semestre(id),
    CONSTRAINT fk_tipo_pago_pago FOREIGN KEY(id_tipo_pago) REFERENCES tipo_pago(id),
    CONSTRAINT fk_metodo_pago_pago FOREIGN KEY(id_metodo_pago) REFERENCES metodo_pago(id),
    CONSTRAINT fk_users_pago FOREIGN KEY(id_user) REFERENCES users(id)
);

-- INSERT PARA LA TABLA DE PAGO
INSERT INTO pago(id_estudiante,id_semestre,id_tipo_pago,id_metodo_pago,mes,anio,monto,id_user) VALUES(1,1,1,2,02,2023,630,1);
INSERT INTO pago(id_estudiante,id_semestre,id_tipo_pago,id_metodo_pago,mes,anio,monto,id_user) VALUES(2,1,1,1,02,2023,630,1);
COMMIT;

-- CREAR TABLA ASIGANACION DE CURSO
CREATE TABLE asignacion_curso (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    id_pago NUMBER(12,0) NOT NULL,
    id_pre_req_curso NUMBER(12,0) NOT NULL,
    id_user NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_pago_asig_curso FOREIGN KEY(id_pago) REFERENCES pago(id),
    CONSTRAINT fk_id_req_curso_curso FOREIGN KEY(id_pre_req_curso) REFERENCES pre_req_curso(id),
    CONSTRAINT fk_users_asig_curso FOREIGN KEY(id_user) REFERENCES users(id)
);

-- INSERT PARA LA TABLA ASIGNACION DE CURSO
INSERT INTO asignacion_curso (id_pago,id_pre_req_curso,id_user) VALUES(1,5,1);
INSERT INTO asignacion_curso (id_pago,id_pre_req_curso,id_user) VALUES(2,6,1);
COMMIT;

CREATE TABLE tipo_nota (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    nombre VARCHAR2(50) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id)
);

--INSERT PARA LA TABLA TIPO_NOTA
INSERT INTO TIPO_NOTA (NOMBRE) VALUES ('ACTIVIDAD');
INSERT INTO TIPO_NOTA (NOMBRE) VALUES ('PRIMERA EVALUACI�N PARCIAL');
INSERT INTO TIPO_NOTA (NOMBRE) VALUES ('SEGUNDA EVALUACI�N PARCIAL');
INSERT INTO TIPO_NOTA (NOMBRE) VALUES ('EVALUACI�N FINAL');
COMMIT;

CREATE TABLE nota (
    id NUMBER(12,0) GENERATED BY DEFAULT AS IDENTITY,
    puntos NUMBER(4,0) NOT NULL,
    id_asig_cat_curso NUMBER(12,0) NOT NULL,
    id_tipo_nota NUMBER(12,0) NOT NULL,
    id_estudiante NUMBER(12,0) NOT NULL,
    id_user NUMBER(12,0) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    PRIMARY KEY(id),
    
    CONSTRAINT fk_asig_curso_nota FOREIGN KEY(id_asig_cat_curso) REFERENCES asig_cat_curso(id),
    CONSTRAINT fk_tipo_nota_nota FOREIGN KEY(id_tipo_nota) REFERENCES tipo_nota(id),
    CONSTRAINT fk_estudiante_nota FOREIGN KEY(id_estudiante) REFERENCES estudiante(id),
    CONSTRAINT fk_users_nota FOREIGN KEY(id_user) REFERENCES users(id)
);

------------
SELECT u.username, u.email, r.nombre_rol 
FROM users u 
INNER JOIN rol r 
ON u.id_rol = r.id;

SELECT CAT.NOMBRE ,C.NOMBRE
FROM ASIG_CAT_CURSO AG
INNER JOIN CURSO C
ON AG.ID_CURSO = C.ID
INNER JOIN CATEDRATICO CAT
ON AG.ID_CATEDRATICO = CAT.ID
WHERE AG.ID_USER = 21;

---------------------------
--Modficamos la tabla nota
---------------------------
ALTER TABLE nota DROP CONSTRAINT fk_users_nota;

ALTER TABLE nota RENAME COLUMN id_user TO id_curso;

ALTER TABLE nota ADD CONSTRAINT fk_curso_nota FOREIGN KEY (id_curso) REFERENCES curso(id);

--------------------------------------------------------------------------------------------

--Obtenemos el listado del tipo de notas
SELECT ID, NOMBRE FROM TIPO_NOTA;

---------------------------
--ELIMINAMOS ID_ASIG_CAT_CURSO DE LA TABLA DE NOTA Y LA REMPLAZAMOS POR ID_USER
---------------------------
ALTER TABLE nota DROP CONSTRAINT fk_asig_curso_nota;

ALTER TABLE nota RENAME COLUMN id_asig_cat_curso TO id_user;

ALTER TABLE nota ADD CONSTRAINT fk_users_nota FOREIGN KEY(id_user) REFERENCES users(id);

-- TESORERIA

-- RENOMBRAR LA COLUMNA NOMBRE DEL ESTUDIANTE EN LA TABLA ESTUDIANTE
ALTER TABLE ESTUDIANTE RENAME COLUMN nomber TO nombre;

--OBTENER TODOS LOS PAGOS QUE A REALIZADO EL USUARIO
SELECT EST.NOMBRE NOMBRE_ESTUDIANTE, SM.NOMBRE SEMESTRE, PG.MES, PG.ANIO, TP.NOMBRE TIPO_DE_PAGO, MP.NOMBRE METODO_DE_PAGO, PG.MONTO
FROM PAGO PG
INNER JOIN ESTUDIANTE EST ON PG.ID_ESTUDIANTE = EST.ID
INNER JOIN SEMESTRE SM ON PG.ID_SEMESTRE = SM.ID
INNER JOIN TIPO_PAGO TP ON PG.ID_TIPO_PAGO = TP.ID
INNER JOIN METODO_PAGO MP ON PG.ID_METODO_PAGO = MP.ID
WHERE PG.ID_USER = 22;

-- CONSULTAR LOS TIPOS DE PAGOS, METODOS DE PAGO, Y EL SEMESTRE
SELECT * FROM TIPO_PAGO;
SELECT * FROM METODO_PAGO;
SELECT * FROM SEMESTRE;

-- CONSULTA PARA LA TABLA DE ESTUDIANTES
SELECT EST.NOMBRE NOMBRE_ESTUDIANTE, EST.DIRECCION, EST.ANIO, CR.NOMBRE CARRERA, U.USERNAME, U.EMAIL FROM ESTUDIANTE EST
INNER JOIN CARRERA CR ON EST.ID_CARRERA = CR.ID
INNER JOIN USERS U ON EST.ID_USER = U.ID;

---------------------------
--Modficamos la tabla asignacion de curso
---------------------------
ALTER TABLE ASIGNACION_CURSO DROP CONSTRAINT fk_id_req_curso_curso;

ALTER TABLE ASIGNACION_CURSO RENAME COLUMN id_pre_req_curso TO id_curso;

ALTER TABLE ASIGNACION_CURSO ADD CONSTRAINT fk_curso_asig_curso FOREIGN KEY (id_curso) REFERENCES curso(id);

-----------------------------------------------------------------------------------
-- MODIFICACION DE LA CONSULTA PARA VER A LOS ESTUDIANTES ASIGNADOS A CIERTO CURSOS
------------------------------------------------------------------------------------

SELECT EST.ID ID_ESTUDIANTE, EST.NOMBRE ESTUDIANTE FROM ASIGNACION_CURSO AG
INNER JOIN PAGO PG ON AG.ID = PG.ID
INNER JOIN ESTUDIANTE EST ON PG.ID_ESTUDIANTE = EST.ID
INNER JOIN CURSO CS ON AG.ID_CURSO = CS.ID
WHERE AG.ID_CURSO = 5;

----------------------------------
-- CONSULTA PARA LAS ASIGNACIONES DE LOS ESTUDIANTES
----------------------------------
SELECT (EST.ANIO || '-' || EST.ID) CARNE, EST.NOMBRE ESTUDIANTE, CR.NOMBRE CARRERA , CS.NOMBRE CURSO, SMT.NOMBRE SEMESTRE FROM ASIGNACION_CURSO AG
INNER JOIN PAGO PG ON AG.ID_PAGO = PG.ID
INNER JOIN ESTUDIANTE EST ON PG.ID_ESTUDIANTE = EST.ID
INNER JOIN CARRERA CR ON EST.ID_CARRERA = CR.ID
INNER JOIN SEMESTRE SMT ON PG.ID_SEMESTRE = SMT.ID
INNER JOIN CURSO CS ON AG.ID_CURSO = CS.ID;

----------------------------------
-- CONSULTA PARA LAS ASIGNACIONES DE LOS CATEDRATICOS
----------------------------------
SELECT CAT.NOMBRE CATEDRATICO, CS.NOMBRE CURSO, U.USERNAME,U.EMAIL FROM ASIG_CAT_CURSO AG
INNER JOIN CATEDRATICO CAT ON AG.ID_CATEDRATICO = CAT.ID
INNER JOIN CURSO CS ON AG.ID_CURSO = CS.ID
INNER JOIN USERS U ON AG.ID_USER = U.ID;

-- MODIFICAR LA TABLA USERS
ALTER TABLE USERS
MODIFY EMAIL VARCHAR(125);

-- Agregar valores unicos en la tabla USERS
ALTER TABLE USERS
ADD CONSTRAINT uk_username UNIQUE (username);

ALTER TABLE USERS
ADD CONSTRAINT uk_email UNIQUE (email);

-- Agregar valor unico al campo de id_pago en la asignacino de curso
ALTER TABLE ASIGNACION_CURSO
ADD CONSTRAINT uk_id_pago UNIQUE (id_pago);

--CONSULTA PARA LOS CURSOS DEPENDIENDO EN QUE SEMESTRE Y CARRERA HAYA PAGADO
SELECT ID, NOMBRE CURSO
FROM CURSO
WHERE ID_SEMESTRE IN (SELECT ID_SEMESTRE FROM PAGO WHERE ID = 1)
AND ID_CARRERA IN (SELECT EST.ID_CARRERA FROM PAGO PG
INNER JOIN ESTUDIANTE EST ON PG.ID_ESTUDIANTE = EST.ID
WHERE PG.ID = 1);

-- CATEDRATICO
ALTER TABLE catedratico ADD id_user NUMBER(12,0);
ALTER TABLE catedratico ADD CONSTRAINT fk_users_catedratico FOREIGN KEY(id_user) REFERENCES users(id);

ALTER TABLE catedratico
MODIFY id_user NUMBER(12,0) NOT NULL;


-- CURSO
SELECT ID, NOMBRE CURSO FROM CURSO
WHERE ID = 1;

-- VER LOS CURSOS ASIGNADOS EN LOS ESTUDIANTES
SELECT C.ID CURSO_ID ,C.NOMBRE CURSO, EST.ID ID_ESTUDIANTE FROM ASIGNACION_CURSO AG
INNER JOIN PAGO PG ON AG.ID_PAGO = PG.ID
INNER JOIN ESTUDIANTE EST ON PG.ID_ESTUDIANTE = EST.ID
INNER JOIN CURSO C ON AG.ID_CURSO = C.ID
WHERE EST.ID_USER = 64;

-- CONSULTA PARA QUE LOS ESTUDIANTES PUEDA VISUALIZAR SU NOTAS
SELECT N.ID_CURSO, C.NOMBRE CURSO, E.NOMBRE ESTUDIANTE, TN.NOMBRE TIPO_DE_NOTA, N.PUNTOS FROM NOTA N
INNER JOIN CURSO C ON N.ID_CURSO = C.ID
INNER JOIN ESTUDIANTE E ON N.ID_ESTUDIANTE = E.ID
INNER JOIN TIPO_NOTA TN ON N.ID_TIPO_NOTA = TN.ID
WHERE N.ID_CURSO = 9 AND N.ID_ESTUDIANTE = 27;

-- Elimiar valor unico al campo de id_pago en la asignacino de curso
ALTER TABLE ASIGNACION_CURSO
DROP CONSTRAINT uk_id_pago;



















